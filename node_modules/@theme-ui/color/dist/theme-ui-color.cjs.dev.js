'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var P = require('polished');
var css = require('@theme-ui/css');

/**
 * Get color from theme.colors
 */
var getColor = function getColor(theme, color) {
  if (typeof color === 'object') {
    color = Array.isArray(color) ? color[0] : color.__default;
  }

  if (process.env.NODE_ENV !== 'production') {
    if (color && /^var\(--theme-ui-colors-(.+)\)$/.test(color)) {
      throw new Error('A CSS property was passed to `getColor`. ' + '`theme.colors` contains CSS custom properties. ' + 'Use `theme.rawColors` instead.');
    }
  }

  return css.get(theme, 'rawColors' in theme ? "rawColors." + color : "colors." + color, color);
};
/**
 * Darken a color by an amount 0–1
 */

var darken = function darken(c, n) {
  return function (t) {
    return P.darken(n, getColor(t, c));
  };
};
/**
 * Lighten a color by an amount 0–1
 */

var lighten = function lighten(c, n) {
  return function (t) {
    return P.lighten(n, getColor(t, c));
  };
};
/**
 * Rotate the hue of a color by an amount 0–360
 */

var rotate = function rotate(c, d) {
  return function (t) {
    return P.adjustHue(d, getColor(t, c));
  };
};
/**
 * Set the hue of a color to a degree 0–360
 */

var hue = function hue(c, h) {
  return function (t) {
    return P.setHue(h, getColor(t, c));
  };
};
/**
 * Set the saturation of a color to an amount 0–1
 */

var saturation = function saturation(c, s) {
  return function (t) {
    return P.setSaturation(s, getColor(t, c));
  };
};
/**
 * Set the lightness of a color to an amount 0–1
 */

var lightness = function lightness(c, l) {
  return function (t) {
    return P.setLightness(l, getColor(t, c));
  };
};
/**
 * Desaturate a color by an amount 0–1
 */

var desaturate = function desaturate(c, n) {
  return function (t) {
    return P.desaturate(n, getColor(t, c));
  };
};
/**
 * Saturate a color by an amount 0–1
 */

var saturate = function saturate(c, n) {
  return function (t) {
    return P.saturate(n, getColor(t, c));
  };
};
/**
 * Shade a color by an amount 0–1
 */

var shade = function shade(c, n) {
  return function (t) {
    return P.shade(n, getColor(t, c));
  };
};
/**
 * Tint a color by an amount 0–1
 */

var tint = function tint(c, n) {
  return function (t) {
    return P.tint(n, getColor(t, c));
  };
};
var transparentize = function transparentize(c, n) {
  return function (t) {
    return P.transparentize(n, getColor(t, c));
  };
};
/**
 * Set the transparency of a color to an amount 0-1
 */

var alpha = function alpha(c, n) {
  return function (t) {
    return P.rgba(getColor(t, c), n);
  };
};
/**
 * Mix two colors by a specific ratio
 */

var mix = function mix(a, b, n) {
  if (n === void 0) {
    n = 0.5;
  }

  return function (t) {
    return P.mix(n, getColor(t, a), getColor(t, b));
  };
};
/**
 * Get the complement of a color
 */

var complement = function complement(c) {
  return function (t) {
    return P.complement(getColor(t, c));
  };
};
/**
 * Get the inverted color
 */

var invert = function invert(c) {
  return function (t) {
    return P.invert(getColor(t, c));
  };
};
/**
 * Desaturate the color to grayscale
 */

var grayscale = function grayscale(c) {
  return desaturate(c, 1);
};

exports.alpha = alpha;
exports.complement = complement;
exports.darken = darken;
exports.desaturate = desaturate;
exports.getColor = getColor;
exports.grayscale = grayscale;
exports.hue = hue;
exports.invert = invert;
exports.lighten = lighten;
exports.lightness = lightness;
exports.mix = mix;
exports.rotate = rotate;
exports.saturate = saturate;
exports.saturation = saturation;
exports.shade = shade;
exports.tint = tint;
exports.transparentize = transparentize;
