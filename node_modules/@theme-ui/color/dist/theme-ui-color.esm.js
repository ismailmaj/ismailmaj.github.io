import { darken as darken$1, lighten as lighten$1, adjustHue, setHue, setSaturation, setLightness, desaturate as desaturate$1, saturate as saturate$1, shade as shade$1, tint as tint$1, transparentize as transparentize$1, rgba, mix as mix$1, complement as complement$1, invert as invert$1 } from 'polished';
import { get } from '@theme-ui/css';

/**
 * Get color from theme.colors
 */
var getColor = function getColor(theme, color) {
  if (typeof color === 'object') {
    color = Array.isArray(color) ? color[0] : color.__default;
  }

  if (process.env.NODE_ENV !== 'production') {
    if (color && /^var\(--theme-ui-colors-(.+)\)$/.test(color)) {
      throw new Error('A CSS property was passed to `getColor`. ' + '`theme.colors` contains CSS custom properties. ' + 'Use `theme.rawColors` instead.');
    }
  }

  return get(theme, 'rawColors' in theme ? "rawColors." + color : "colors." + color, color);
};
/**
 * Darken a color by an amount 0–1
 */

var darken = function darken(c, n) {
  return function (t) {
    return darken$1(n, getColor(t, c));
  };
};
/**
 * Lighten a color by an amount 0–1
 */

var lighten = function lighten(c, n) {
  return function (t) {
    return lighten$1(n, getColor(t, c));
  };
};
/**
 * Rotate the hue of a color by an amount 0–360
 */

var rotate = function rotate(c, d) {
  return function (t) {
    return adjustHue(d, getColor(t, c));
  };
};
/**
 * Set the hue of a color to a degree 0–360
 */

var hue = function hue(c, h) {
  return function (t) {
    return setHue(h, getColor(t, c));
  };
};
/**
 * Set the saturation of a color to an amount 0–1
 */

var saturation = function saturation(c, s) {
  return function (t) {
    return setSaturation(s, getColor(t, c));
  };
};
/**
 * Set the lightness of a color to an amount 0–1
 */

var lightness = function lightness(c, l) {
  return function (t) {
    return setLightness(l, getColor(t, c));
  };
};
/**
 * Desaturate a color by an amount 0–1
 */

var desaturate = function desaturate(c, n) {
  return function (t) {
    return desaturate$1(n, getColor(t, c));
  };
};
/**
 * Saturate a color by an amount 0–1
 */

var saturate = function saturate(c, n) {
  return function (t) {
    return saturate$1(n, getColor(t, c));
  };
};
/**
 * Shade a color by an amount 0–1
 */

var shade = function shade(c, n) {
  return function (t) {
    return shade$1(n, getColor(t, c));
  };
};
/**
 * Tint a color by an amount 0–1
 */

var tint = function tint(c, n) {
  return function (t) {
    return tint$1(n, getColor(t, c));
  };
};
var transparentize = function transparentize(c, n) {
  return function (t) {
    return transparentize$1(n, getColor(t, c));
  };
};
/**
 * Set the transparency of a color to an amount 0-1
 */

var alpha = function alpha(c, n) {
  return function (t) {
    return rgba(getColor(t, c), n);
  };
};
/**
 * Mix two colors by a specific ratio
 */

var mix = function mix(a, b, n) {
  if (n === void 0) {
    n = 0.5;
  }

  return function (t) {
    return mix$1(n, getColor(t, a), getColor(t, b));
  };
};
/**
 * Get the complement of a color
 */

var complement = function complement(c) {
  return function (t) {
    return complement$1(getColor(t, c));
  };
};
/**
 * Get the inverted color
 */

var invert = function invert(c) {
  return function (t) {
    return invert$1(getColor(t, c));
  };
};
/**
 * Desaturate the color to grayscale
 */

var grayscale = function grayscale(c) {
  return desaturate(c, 1);
};

export { alpha, complement, darken, desaturate, getColor, grayscale, hue, invert, lighten, lightness, mix, rotate, saturate, saturation, shade, tint, transparentize };
